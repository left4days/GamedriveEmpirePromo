@import "fonts.scss";

$black: #020000;
$green: #9EE727;
$white: #fff;
$grey: #8b9497;
$bgDark: #1a1a1a;
$brown: #484848;
$orange: #FF5000;

@mixin base-sizes() {
  &__size {
    &_l {
      width: rem(546px);
    }
    &_s {
      width: rem(446px);
    }
    &_full {
      width: 100%;
      height: rem(85px);
    }
  }
}

@mixin placeholder-color($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }

  &::-moz-placeholder {
    color: $color;
  }

  &:-moz-placeholder {
    color: $color;
  }

  &:-ms-input-placeholder {
    color: $color;
  }
}

@mixin base-margins() {
  &__margin {
    &_left {
      margin-left: 10px;
      &_x2 {
        margin-left: 20px;
      }
    }
    &_right {
      margin-right: rem(10px);
      &_x2 {
        margin-right: rem(20px);
      }
    }
    &_top {
      margin-top: rem(10px);
      &_x2 {
        margin-top: rem(20px);
      }
    }
    &_bottom {
      margin-bottom: rem(10px);
      &_x2 {
        margin-bottom: rem(20px);
      }
    }
  }
}

@mixin base-aligns() {
  &__align {
    &_left {
      text-align: left;
    }
    &_center {
      text-align: center;
    }
    &_right {
      text-align: right;
    }
  }
}

@mixin base-weight() {
  &__weight {
    &_400 {
      font-weight: 400;
    }
    &_500 {
      font-weight: 500;
    }
    &_600 {
      font-weight: 600;
    }
    &_700 {
      font-weight: 700;
    }
    &_800 {
      font-weight: 800;
    }
  }
}

@mixin main-font($weight) {
  font-family: "Montserrat", sans-serif;
  font-weight: $weight;
}

h1,h2,h3,h4,h5,h6,p {
  padding: 0;
  margin: 0;
  font-size: rem(16px);
}
ul,ol {
  padding: 0;
  margin: 0;
  font-size: 0;
}
div {
  &:focus {
    outline: 0;
  }
}
a {
  text-decoration: none;
  color: $black;
  font-size: rem(16px);
}
body {
  font-size: rem(13px);
  @include main-font(500);
  background-color: $black;
  padding: 0;
  box-sizing: border-box;
  margin: 0;
  background-repeat: no-repeat;
  background-position: top center;
  > * {
    box-sizing: border-box;
  }
}

// Responsive settings
$screenSizes: (
        desktop: 1640px,
        desktop-small: 1440px,
        desktop-x-small: 1200px,
        tablet: 991px,
        mobile: 768px,
        mobile-small: 480px,
        mobile-big: 560px,
);

@mixin screen-gt($name) {
  @media only screen and (min-width: #{map-get($screenSizes, $name)}) {
    @content;
  }
}

@mixin screen-lt($name) {
  @media only screen and (max-width: #{map-get($screenSizes, $name)}) {
    @content;
  }
}

@mixin container-size() {
  width: rem(1500px);
  margin: auto;
  padding: 0 rem(20px);
  @include screen-lt(desktop) {
    width: rem(1400px);
  }
  @include screen-lt(tablet) {
    width: 100%;
  }
}


// Convertation px to rem settings
$rem-baseline: 16px;
$rem-fallback: false !default;
$rem-px-only: false !default;
@function rem-separator($list, $separator: false) {
  @if $separator == 'comma' or $separator == 'space' {
    @return append($list, null, $separator);
  }

  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == 'list' {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

html {
  @include rem-baseline;
  @include screen-lt(desktop) {
    @include rem-baseline(80%);
  }
  @include screen-lt(desktop-x-small) {
    @include rem-baseline(70%);
  }

}